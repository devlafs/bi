<?php

namespace app\models;

use app\magic\ActiveGraphMagic;
use Yii;
use app\magic\MobileMagic;

class Consulta extends \yii\db\ActiveRecord {

    public $permissoes;

    public static function tableName() {
        return 'bpbi_consulta';
    }

    public function rules() {
        return [
            [['id_indicador', 'nome'], 'required'],
            [['id_indicador', 'id_pasta', 'id_pallete', 'limite', 'tipo_serializacao', 'tempo_expiracao_email', 'created_by', 'updated_by'], 'integer'],
            [['condicao', 'created_at', 'privado', 'is_ativo', 'is_excluido', 'email_externo', 'updated_at', 'permissoes'], 'safe'],
            [['nome'], 'string', 'max' => 255],
            ['limite', 'default', 'value' => 0],
            [['javascript', 'condicao_avancada'], 'string'],
            [['id_indicador'], 'exist', 'skipOnError' => true, 'targetClass' => Indicador::className(), 'targetAttribute' => ['id_indicador' => 'id']],
            [['id_pasta'], 'exist', 'skipOnError' => true, 'targetClass' => Pasta::className(), 'targetAttribute' => ['id_pasta' => 'id']],
            [['id_pallete'], 'exist', 'skipOnError' => true, 'targetClass' => Pallete::className(), 'targetAttribute' => ['id_pallete' => 'id']],
        ];
    }

    public function attributeLabels() {
        return
                [
                    'id_indicador' => Yii::t('app', 'geral.indicador'),
                    'id_pasta' => Yii::t('app', 'geral.pasta'),
                    'id_pallete' => Yii::t('app', 'consulta.id_pallete'),
                    'nome' => Yii::t('app', 'geral.nome'),
                    'condicao' => Yii::t('app', 'consulta.condicao'),
                    'limite' => Yii::t('app', 'consulta.limite'),
                    'tipo_serializacao' => Yii::t('app', 'consulta.tipo_serializacao'),
                    'email_externo' => Yii::t('app', 'consulta.email_externo'),
                    'tempo_expiracao_email' => Yii::t('app', 'consulta.tempo_expiracao_email'),
                    'javascript' => Yii::t('app', 'consulta.javascript'),
                    'condicao_avancada' => Yii::t('app', 'consulta.condicao_avancada'),
                    'privado' => Yii::t('app', 'consulta.privado'),
                    'is_ativo' => Yii::t('app', 'geral.is_ativo'),
                    'is_excluido' => Yii::t('app', 'geral.is_excluido'),
                    'created_at' => Yii::t('app', 'geral.created_at'),
                    'updated_at' => Yii::t('app', 'geral.updated_at'),
                    'created_by' => Yii::t('app', 'geral.created_by'),
                    'updated_by' => Yii::t('app', 'geral.updated_by'),
        ];
    }

    public function behaviors() {
        $behaviors = [
                    [
                        'class' => \app\behaviors\ChangeLogBehavior::className(),
                        'excludedAttributes' => ['updated_at'],
                    ],
                    'json' =>
                    [
                        'class' => 'app\components\JsonBehavior',
                        'attributes' =>
                        [
                            'condicao'
                        ],
                    ],
                    [
                        'class' => \yii\behaviors\BlameableBehavior::className(),
                        'createdByAttribute' => 'created_by',
                        'updatedByAttribute' => 'updated_by',
                    ],
                    [
                        'class' => \yii\behaviors\TimestampBehavior::className(),
                        'createdAtAttribute' => 'created_at',
                        'updatedAtAttribute' => 'updated_at',
                        'value' => new \yii\db\Expression('NOW()'),
                    ],
        ];

        return array_merge(parent::behaviors(), $behaviors);
    }

    public function getIndicador() {
        return $this->hasOne(Indicador::className(), ['id' => 'id_indicador']);
    }

    public function getPasta() {
        return $this->hasOne(Pasta::className(), ['id' => 'id_pasta']);
    }

    public function getPallete() {
        return $this->hasOne(Pallete::className(), ['id' => 'id_pallete']);
    }

    public function getItems() {
        return $this->hasMany(ConsultaItem::className(), ['id_consulta' => 'id']);
    }

    public static function find() {
        return new queries\ConsultaQuery(get_called_class());
    }

    public function beforeSave($insert)
    {
        $this->nome = str_replace("'", "`", $this->nome);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function saveData($data) {
        ConsultaItem::deleteAll(['id_consulta' => $this->id]);

        foreach ($data as $column => $value) {
            if ($column == 'nome') {
                $this->nome = $value;
                $this->save();
            } elseif ($column == 'argumento') {
                $ordem = 1;

                foreach ($value as $dados) {
                    $model = new ConsultaItem();
                    $model->id_consulta = $this->id;
                    $model->id_campo = $dados['id'];
                    $model->ordem = $ordem;
                    $model->parametro = $column;
                    $model->ordenacao = (int) $dados['sort'];
                    $model->tipo_grafico = $dados['type'];
                    $model->tipo_numero = (int) $dados['tipo_numero'];
                    $model->save();

                    $ordem++;
                }
            } elseif ($column != '_csrf') {
                $ordem = 1;

                foreach ($value as $field_id) {
                    $model = new ConsultaItem();
                    $model->id_consulta = $this->id;
                    $model->id_campo = $field_id;
                    $model->ordem = $ordem;
                    $model->parametro = $column;
                    $model->ordenacao = 0;
                    $model->tipo_numero = 1;
                    $model->tipo_grafico = 'column';
                    $model->save();

                    $ordem++;
                }
            }
        }
    }

    public function getChart() {
        $sql =  <<<SQL

            SELECT 
                tipo_grafico
            FROM
                bpbi_consulta_item
            WHERE
                parametro = 'argumento'
                AND id_consulta = {$this->id}
                AND is_ativo = 1
                AND is_excluido = 0
                order by ordem ASC limit 1;

SQL;
        $grafico = Yii::$app->db->createCommand($sql)->queryScalar();
        return ($grafico) ? ActiveGraphMagic::getIconData()[$grafico] : 'column';
    }

    public function getPath($pasta) {
        $nomes = [];

        if ($pasta) {
            if ($pasta->pasta) {
                $nomes = array_merge($nomes, $this->getPath($pasta->pasta));
            }

            $nomes[] = $pasta->nome;
        }

        return $nomes;
    }

    public function getPathName($arrow = TRUE) {
        if (MobileMagic::isMobile()) {
            return $this->nome;
        }

        $paths = $this->getPath($this->pasta);

        $name = '';
        $isset = FALSE;
        $separator = ($arrow) ? "<i class='bp-arrow-right'></i>" : "/";

        foreach ($paths as $index => $pathName) {
            $name .= ($index > 0) ? " {$separator} {$pathName}" : " {$pathName}";

            $isset = TRUE;
        }

        $name .= ($isset) ? " {$separator} {$this->nome}" : "{$this->nome}";

        if($this->privado)
        {
            $name .= " <i class='fa fa-lock'></i>";
        }

        return $name;
    }

    public function aplicaFiltro($data) {
        $filtro = [];
        $filtro_avancado = null;

        if (isset($data['Form'])) {
            $ordemGrupo = 1;

            foreach ($data['Form'] as $dadosGrupo) {
                $pode_pular = false;

                if ($dadosGrupo) {
                    $ordemCaixa = 1;

                    foreach ($dadosGrupo as $dadosCaixa) {
                        if ($dadosCaixa) {
                            $field = (isset($dadosCaixa['field']) && !empty($dadosCaixa['field'])) ? $dadosCaixa['field'] : null;
                            $type = (isset($dadosCaixa['type']) && (!empty($dadosCaixa['type']) || $dadosCaixa['type'] == 0)) ? $dadosCaixa['type'] : null;
                            $value = (isset($dadosCaixa['value']) && (!empty($dadosCaixa['value']) || $dadosCaixa['value'] == 0)) ? $dadosCaixa['value'] : null;

                            if (!is_null($field) && !is_null($type) && !is_null($value)) {
                                $filtro[$ordemGrupo][$ordemCaixa] = $dadosCaixa;

                                $ordemCaixa++;
                                $pode_pular = true;
                            }
                        }
                    }
                }

                if ($pode_pular) {
                    $ordemGrupo++;
                }
            }
        }
        elseif(isset($data['advancedForm']))
        {
            $filtro_avancado = $data['advancedForm'];
        }

        $this->condicao = $filtro;
        $this->condicao_avancada = $filtro_avancado;
        $this->save();
    }

    public function getPermissoes() {
        $perfis = AdminPerfil::find()->andWhere([
                    'is_ativo' => TRUE,
                    'is_excluido' => FALSE,
                    'acesso_bi' => TRUE,
                    'is_admin' => FALSE])->orderBy('nome ASC')->all();

        $modelPermissoes = PermissaoConsulta::find()->andWhere(['is_ativo' => TRUE,
                    'is_excluido' => FALSE])->orderBy('nome ASC')->all();

        $this->permissoes = [];

        if ($perfis) {
            foreach ($perfis as $perfil) {
                if ($modelPermissoes) {
                    foreach ($modelPermissoes as $modelPermissao) {
                        $value = ConsultaPermissao::find()->andWhere([
                                    'is_ativo' => TRUE,
                                    'is_excluido' => FALSE,
                                    'id_consulta' => $this->id,
                                    'id_perfil' => $perfil->id,
                                    'id_permissao' => $modelPermissao->id
                                ])->exists();

                        $this->permissoes[$perfil->id]['nome'] = $perfil->nome;

                        $this->permissoes[$perfil->id]['permissoes'][$modelPermissao->id] = [
                                    'attributes' => $modelPermissao->attributes,
                                    'value' => $value
                        ];
                    }
                }
            }
        }

        return $this->permissoes;
    }

    public function duplicar($consulta) {
        $this->id_indicador = $consulta->id_indicador;
        $this->id_pasta = $consulta->id_pasta;
        $this->id_pallete = $consulta->id_pallete;
        $this->nome = $consulta->nome;
        $this->condicao = $consulta->condicao;
        $this->condicao_avancada = $consulta->condicao_avancada;
        $this->limite = $consulta->limite;
        $this->tipo_serializacao = $consulta->tipo_serializacao;
        $this->email_externo = $consulta->email_externo;
        $this->tempo_expiracao_email = $consulta->tempo_expiracao_email;
        $this->javascript = $consulta->javascript;
        $this->privado = $consulta->privado;

        if ($this->save()) {
            $filtrosUsuario = ConsultaFiltroUsuario::find()->andWhere([
                        'id_consulta' => $consulta->id,
                        'is_ativo' => TRUE,
                        'is_excluido' => FALSE
                    ])->all();

            if ($filtrosUsuario) {
                foreach ($filtrosUsuario as $filtro) {
                    $novoFiltro = new ConsultaFiltroUsuario();
                    $novoFiltro->id_consulta = $this->id;
                    $novoFiltro->id_usuario = $filtro->id_usuario;
                    $novoFiltro->condicao = $filtro->condicao;
                    $novoFiltro->save();
                }
            }

            $graficosUsuario = ConsultaGraficoUsuario::find()->andWhere([
                        'id_consulta' => $consulta->id,
                        'is_ativo' => TRUE,
                        'is_excluido' => FALSE
                    ])->all();

            if ($graficosUsuario) {
                foreach ($graficosUsuario as $grafico) {
                    $novoGrafico = new ConsultaGraficoUsuario();
                    $novoGrafico->id_consulta = $this->id;
                    $novoGrafico->id_usuario = $grafico->id_usuario;
                    $novoGrafico->campo = $grafico->campo;
                    $novoGrafico->tipo_grafico = $grafico->tipo_grafico;
                    $novoGrafico->save();
                }
            }

            $itens = ConsultaItem::find()->andWhere([
                        'id_consulta' => $consulta->id,
                        'is_ativo' => TRUE,
                        'is_excluido' => FALSE
                    ])->all();

            if ($itens) {
                foreach ($itens as $item) {
                    $novoItem = new ConsultaItem();
                    $novoItem->id_consulta = $this->id;
                    $novoItem->id_campo = $item->id_campo;
                    $novoItem->ordem = $item->ordem;
                    $novoItem->parametro = $item->parametro;
                    $novoItem->ordenacao = $item->ordenacao;
                    $novoItem->tipo_grafico = $item->tipo_grafico;
                    $novoItem->save();
                }
            }

            $configuracoes = ConsultaItemConfiguracao::find()->andWhere([
                        'id_consulta' => $consulta->id,
                        'is_ativo' => TRUE,
                        'is_excluido' => FALSE
                    ])->all();

            if ($configuracoes) {
                foreach ($configuracoes as $configuracao) {
                    $novaConfiguracao = new ConsultaItemConfiguracao();
                    $novaConfiguracao->id_consulta = $this->id;
                    $novaConfiguracao->id_item = $configuracao->id_item;
                    $novaConfiguracao->ordem = $configuracao->ordem;
                    $novaConfiguracao->id_campo = $configuracao->id_campo;
                    $novaConfiguracao->save();
                }
            }

            $cores = ConsultaItemCor::find()->andWhere([
                'id_consulta' => $consulta->id,
                'is_ativo' => TRUE,
                'is_excluido' => FALSE
            ])->all();

            if ($cores) {
                foreach ($cores as $cor) {
                    $novaCor = new ConsultaItemCor();
                    $novaCor->ordem = $cor->ordem;
                    $novaCor->id_consulta = $this->id;
                    $novaCor->id_campo = $cor->id_campo;
                    $novaCor->valor = $cor->valor;
                    $novaCor->cor = $cor->cor;
                    $novaCor->save();
                }
            }

            $permissoes = ConsultaPermissao::find()->andWhere([
                        'id_consulta' => $consulta->id,
                        'is_ativo' => TRUE,
                        'is_excluido' => FALSE
                    ])->all();

            if ($permissoes) {
                foreach ($permissoes as $permissao) {
                    $novaPermissao = new ConsultaPermissao();
                    $novaPermissao->id_consulta = $this->id;
                    $novaPermissao->id_permissao = $permissao->id_permissao;
                    $novaPermissao->id_perfil = $permissao->id_perfil;
                    $novaPermissao->save();
                }
            }

            $configuracoes_internas = ConsultaCampoConfiguracao::find()->andWhere([
                        'id_consulta' => $consulta->id,
                        'is_ativo' => TRUE,
                        'is_excluido' => FALSE
                    ])->all();

            if ($configuracoes_internas) {
                foreach ($configuracoes_internas as $configuracao_interna) {
                    $novaConfiguracaoInterna = new ConsultaCampoConfiguracao();
                    $novaConfiguracaoInterna->id_consulta = $this->id;
                    $novaConfiguracaoInterna->id_campo = $configuracao_interna->id_campo;
                    $novaConfiguracaoInterna->tipo = $configuracao_interna->tipo;
                    $novaConfiguracaoInterna->view = $configuracao_interna->view;
                    $novaConfiguracaoInterna->data = $configuracao_interna->data;
                    $novaConfiguracaoInterna->is_serie = $configuracao_interna->is_serie;
                    $novaConfiguracaoInterna->data_serie = $configuracao_interna->data_serie;
                    $novaConfiguracaoInterna->data_timeline = $configuracao_interna->data_timeline;
                    $novaConfiguracaoInterna->save();
                }
            }

            return true;
        } else {
            return false;
        }
    }

}
